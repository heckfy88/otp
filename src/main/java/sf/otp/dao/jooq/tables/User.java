/*
 * This file is generated by jOOQ.
 */
package sf.otp.dao.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sf.otp.dao.jooq.Indexes;
import sf.otp.dao.jooq.Keys;
import sf.otp.dao.jooq.Otp;
import sf.otp.dao.jooq.tables.records.UserRecord;


/**
 * Пользователи
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>otp.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>otp.user.id</code>. Идентификатор пользователя
     */
    public final TableField<UserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "Идентификатор пользователя");

    /**
     * The column <code>otp.user.username</code>. Имя пользователя
     */
    public final TableField<UserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(100).nullable(false), this, "Имя пользователя");

    /**
     * The column <code>otp.user.role</code>. Роль пользователя
     */
    public final TableField<UserRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(100).nullable(false), this, "Роль пользователя");

    /**
     * The column <code>otp.user.email</code>. Электронная почта пользователя
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(100), this, "Электронная почта пользователя");

    /**
     * The column <code>otp.user.phone_number</code>. Номер телефона
     * пользователя
     */
    public final TableField<UserRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(100), this, "Номер телефона пользователя");

    /**
     * The column <code>otp.user.tg_id</code>. ID пользователя в Telegram
     */
    public final TableField<UserRecord, String> TG_ID = createField(DSL.name("tg_id"), SQLDataType.VARCHAR(100), this, "ID пользователя в Telegram");

    /**
     * The column <code>otp.user.password_hash</code>. Хэш пароля пользователя
     */
    public final TableField<UserRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.CLOB.nullable(false), this, "Хэш пароля пользователя");

    /**
     * The column <code>otp.user.created_at</code>. Дата создания пользователя
     */
    public final TableField<UserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "Дата создания пользователя");

    /**
     * The column <code>otp.user.is_active</code>. Активность пользователя
     */
    public final TableField<UserRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "Активность пользователя");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Пользователи"), TableOptions.table());
    }

    /**
     * Create an aliased <code>otp.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>otp.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>otp.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Otp.OTP;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.UNIQUE_ADMIN_USER);
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.PK_USER;
    }

    @Override
    public List<UniqueKey<UserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_USERNAME_KEY, Keys.USER_EMAIL_KEY, Keys.USER_PHONE_NUMBER_KEY, Keys.USER_TG_ID_KEY);
    }

    @Override
    public List<Check<UserRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_user_role"), "(((role)::text = ANY ((ARRAY['USER'::character varying, 'ADMIN'::character varying])::text[])))", true)
        );
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    @Override
    public User as(Table<?> alias) {
        return new User(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Table<?> name) {
        return new User(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, String, String, String, String, String, LocalDateTime, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
