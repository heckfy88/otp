/*
 * This file is generated by jOOQ.
 */
package sf.otp.dao.jooq.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import sf.otp.dao.jooq.tables.Config;


/**
 * Таблица с настройками для otp
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigRecord extends UpdatableRecordImpl<ConfigRecord> implements Record4<Integer, Integer, Integer, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>otp.config.id</code>. Ограничение для одной строки
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>otp.config.id</code>. Ограничение для одной строки
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>otp.config.length</code>. Длина токена
     */
    public void setLength(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>otp.config.length</code>. Длина токена
     */
    public Integer getLength() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>otp.config.duration</code>. Время жизни токена в
     * секундах
     */
    public void setDuration(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>otp.config.duration</code>. Время жизни токена в
     * секундах
     */
    public Integer getDuration() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>otp.config.updated_at</code>. Время последнего
     * обновления
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>otp.config.updated_at</code>. Время последнего
     * обновления
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Integer, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Config.CONFIG.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Config.CONFIG.LENGTH;
    }

    @Override
    public Field<Integer> field3() {
        return Config.CONFIG.DURATION;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Config.CONFIG.UPDATED_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getLength();
    }

    @Override
    public Integer component3() {
        return getDuration();
    }

    @Override
    public LocalDateTime component4() {
        return getUpdatedAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getLength();
    }

    @Override
    public Integer value3() {
        return getDuration();
    }

    @Override
    public LocalDateTime value4() {
        return getUpdatedAt();
    }

    @Override
    public ConfigRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ConfigRecord value2(Integer value) {
        setLength(value);
        return this;
    }

    @Override
    public ConfigRecord value3(Integer value) {
        setDuration(value);
        return this;
    }

    @Override
    public ConfigRecord value4(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public ConfigRecord values(Integer value1, Integer value2, Integer value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigRecord
     */
    public ConfigRecord() {
        super(Config.CONFIG);
    }

    /**
     * Create a detached, initialised ConfigRecord
     */
    public ConfigRecord(Integer id, Integer length, Integer duration, LocalDateTime updatedAt) {
        super(Config.CONFIG);

        setId(id);
        setLength(length);
        setDuration(duration);
        setUpdatedAt(updatedAt);
        resetChangedOnNotNull();
    }
}
