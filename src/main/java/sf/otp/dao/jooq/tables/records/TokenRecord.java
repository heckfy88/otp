/*
 * This file is generated by jOOQ.
 */
package sf.otp.dao.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import sf.otp.dao.jooq.tables.Token;


/**
 * Таблица для хранения токенов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenRecord extends UpdatableRecordImpl<TokenRecord> implements Record8<UUID, UUID, UUID, String, String, LocalDateTime, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>otp.token.id</code>. Уникальный идентификатор токена
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>otp.token.id</code>. Уникальный идентификатор токена
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>otp.token.user_id</code>. Идентификатор пользователя
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>otp.token.user_id</code>. Идентификатор пользователя
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>otp.token.operation_id</code>. Идентификатор операции
     */
    public void setOperationId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>otp.token.operation_id</code>. Идентификатор операции
     */
    public UUID getOperationId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>otp.token.code</code>. Токен
     */
    public void setCode(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>otp.token.code</code>. Токен
     */
    public String getCode() {
        return (String) get(3);
    }

    /**
     * Setter for <code>otp.token.status</code>. Статус токена
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>otp.token.status</code>. Статус токена
     */
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>otp.token.created_at</code>. Время создания токена
     */
    public void setCreatedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>otp.token.created_at</code>. Время создания токена
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>otp.token.updated_at</code>. Время обновления токена
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>otp.token.updated_at</code>. Время обновления токена
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>otp.token.expires_at</code>. Время жизни токена
     */
    public void setExpiresAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>otp.token.expires_at</code>. Время жизни токена
     */
    public LocalDateTime getExpiresAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, UUID, String, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, UUID, UUID, String, String, LocalDateTime, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Token.TOKEN.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Token.TOKEN.USER_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Token.TOKEN.OPERATION_ID;
    }

    @Override
    public Field<String> field4() {
        return Token.TOKEN.CODE;
    }

    @Override
    public Field<String> field5() {
        return Token.TOKEN.STATUS;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Token.TOKEN.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Token.TOKEN.UPDATED_AT;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Token.TOKEN.EXPIRES_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public UUID component3() {
        return getOperationId();
    }

    @Override
    public String component4() {
        return getCode();
    }

    @Override
    public String component5() {
        return getStatus();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdatedAt();
    }

    @Override
    public LocalDateTime component8() {
        return getExpiresAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public UUID value3() {
        return getOperationId();
    }

    @Override
    public String value4() {
        return getCode();
    }

    @Override
    public String value5() {
        return getStatus();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdatedAt();
    }

    @Override
    public LocalDateTime value8() {
        return getExpiresAt();
    }

    @Override
    public TokenRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public TokenRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public TokenRecord value3(UUID value) {
        setOperationId(value);
        return this;
    }

    @Override
    public TokenRecord value4(String value) {
        setCode(value);
        return this;
    }

    @Override
    public TokenRecord value5(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public TokenRecord value6(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public TokenRecord value7(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public TokenRecord value8(LocalDateTime value) {
        setExpiresAt(value);
        return this;
    }

    @Override
    public TokenRecord values(UUID value1, UUID value2, UUID value3, String value4, String value5, LocalDateTime value6, LocalDateTime value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenRecord
     */
    public TokenRecord() {
        super(Token.TOKEN);
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    public TokenRecord(UUID id, UUID userId, UUID operationId, String code, String status, LocalDateTime createdAt, LocalDateTime updatedAt, LocalDateTime expiresAt) {
        super(Token.TOKEN);

        setId(id);
        setUserId(userId);
        setOperationId(operationId);
        setCode(code);
        setStatus(status);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setExpiresAt(expiresAt);
        resetChangedOnNotNull();
    }
}
