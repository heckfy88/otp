/*
 * This file is generated by jOOQ.
 */
package sf.otp.dao.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import sf.otp.dao.jooq.Keys;
import sf.otp.dao.jooq.Otp;
import sf.otp.dao.jooq.tables.records.ConfigRecord;


/**
 * Таблица с настройками для otp
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Config extends TableImpl<ConfigRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>otp.config</code>
     */
    public static final Config CONFIG = new Config();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigRecord> getRecordType() {
        return ConfigRecord.class;
    }

    /**
     * The column <code>otp.config.id</code>. Ограничение для одной строки
     */
    public final TableField<ConfigRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "Ограничение для одной строки");

    /**
     * The column <code>otp.config.length</code>. Длина токена
     */
    public final TableField<ConfigRecord, Integer> LENGTH = createField(DSL.name("length"), SQLDataType.INTEGER.nullable(false), this, "Длина токена");

    /**
     * The column <code>otp.config.duration</code>. Время жизни токена в
     * секундах
     */
    public final TableField<ConfigRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER.nullable(false), this, "Время жизни токена в секундах");

    /**
     * The column <code>otp.config.updated_at</code>. Время последнего
     * обновления
     */
    public final TableField<ConfigRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "Время последнего обновления");

    private Config(Name alias, Table<ConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private Config(Name alias, Table<ConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Таблица с настройками для otp"), TableOptions.table());
    }

    /**
     * Create an aliased <code>otp.config</code> table reference
     */
    public Config(String alias) {
        this(DSL.name(alias), CONFIG);
    }

    /**
     * Create an aliased <code>otp.config</code> table reference
     */
    public Config(Name alias) {
        this(alias, CONFIG);
    }

    /**
     * Create a <code>otp.config</code> table reference
     */
    public Config() {
        this(DSL.name("config"), null);
    }

    public <O extends Record> Config(Table<O> child, ForeignKey<O, ConfigRecord> key) {
        super(child, key, CONFIG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Otp.OTP;
    }

    @Override
    public UniqueKey<ConfigRecord> getPrimaryKey() {
        return Keys.PK_OTP_CONFIG;
    }

    @Override
    public List<Check<ConfigRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("length_constraint"), "(((length >= 4) AND (length <= 32)))", true),
            Internal.createCheck(this, DSL.name("single_otp_config_row"), "((id = 1))", true)
        );
    }

    @Override
    public Config as(String alias) {
        return new Config(DSL.name(alias), this);
    }

    @Override
    public Config as(Name alias) {
        return new Config(alias, this);
    }

    @Override
    public Config as(Table<?> alias) {
        return new Config(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(String name) {
        return new Config(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Name name) {
        return new Config(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Table<?> name) {
        return new Config(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
