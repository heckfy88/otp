/*
 * This file is generated by jOOQ.
 */
package sf.otp.dao.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import sf.otp.dao.jooq.tables.Config;
import sf.otp.dao.jooq.tables.Token;
import sf.otp.dao.jooq.tables.User;
import sf.otp.dao.jooq.tables.records.ConfigRecord;
import sf.otp.dao.jooq.tables.records.TokenRecord;
import sf.otp.dao.jooq.tables.records.UserRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in otp.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ConfigRecord> PK_OTP_CONFIG = Internal.createUniqueKey(Config.CONFIG, DSL.name("pk_otp_config"), new TableField[] { Config.CONFIG.ID }, true);
    public static final UniqueKey<TokenRecord> PK_OTP_TOKEN = Internal.createUniqueKey(Token.TOKEN, DSL.name("pk_otp_token"), new TableField[] { Token.TOKEN.ID }, true);
    public static final UniqueKey<UserRecord> PK_USER = Internal.createUniqueKey(User.USER, DSL.name("pk_user"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_email_key"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> USER_PHONE_NUMBER_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_phone_number_key"), new TableField[] { User.USER.PHONE_NUMBER }, true);
    public static final UniqueKey<UserRecord> USER_TG_ID_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_tg_id_key"), new TableField[] { User.USER.TG_ID }, true);
    public static final UniqueKey<UserRecord> USER_USERNAME_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_username_key"), new TableField[] { User.USER.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<TokenRecord, UserRecord> TOKEN__FK_OTP_TOKEN_USER = Internal.createForeignKey(Token.TOKEN, DSL.name("fk_otp_token_user"), new TableField[] { Token.TOKEN.USER_ID }, Keys.PK_USER, new TableField[] { User.USER.ID }, true);
}
